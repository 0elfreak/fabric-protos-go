// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway/gateway.proto

package gateway

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/hyperledger/fabric-protos-go/common"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Result is the value that is returned by the transaction function.
type Result struct {
	// The byte array returned from the chaincode invocation.
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// ProposedTransaction contains the signed proposal ready for endorsement plus any processing options.
type ProposedTransaction struct {
	// The signed proposal.
	Proposal *peer.SignedProposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// Other options will be added here.  The following are experimental at the moment.
	TxId                 string   `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ChannelId            string   `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposedTransaction) Reset()         { *m = ProposedTransaction{} }
func (m *ProposedTransaction) String() string { return proto.CompactTextString(m) }
func (*ProposedTransaction) ProtoMessage()    {}
func (*ProposedTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{1}
}

func (m *ProposedTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposedTransaction.Unmarshal(m, b)
}
func (m *ProposedTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposedTransaction.Marshal(b, m, deterministic)
}
func (m *ProposedTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposedTransaction.Merge(m, src)
}
func (m *ProposedTransaction) XXX_Size() int {
	return xxx_messageInfo_ProposedTransaction.Size(m)
}
func (m *ProposedTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposedTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ProposedTransaction proto.InternalMessageInfo

func (m *ProposedTransaction) GetProposal() *peer.SignedProposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *ProposedTransaction) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *ProposedTransaction) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// PreparedTransaction contains the set of transaction responses from the endorsing peers for signing by the client
// before submitting to ordering service (via gateway).
type PreparedTransaction struct {
	// The transaction envelope.
	Envelope *common.Envelope `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
	// The value that is returned by the transaction function during endorsement.
	Response *Result `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	// The following fields are pulled out of the envelope to the top level for convenience to the client.
	TxId                 string   `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ChannelId            string   `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreparedTransaction) Reset()         { *m = PreparedTransaction{} }
func (m *PreparedTransaction) String() string { return proto.CompactTextString(m) }
func (*PreparedTransaction) ProtoMessage()    {}
func (*PreparedTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{2}
}

func (m *PreparedTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreparedTransaction.Unmarshal(m, b)
}
func (m *PreparedTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreparedTransaction.Marshal(b, m, deterministic)
}
func (m *PreparedTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreparedTransaction.Merge(m, src)
}
func (m *PreparedTransaction) XXX_Size() int {
	return xxx_messageInfo_PreparedTransaction.Size(m)
}
func (m *PreparedTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_PreparedTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_PreparedTransaction proto.InternalMessageInfo

func (m *PreparedTransaction) GetEnvelope() *common.Envelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

func (m *PreparedTransaction) GetResponse() *Result {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *PreparedTransaction) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *PreparedTransaction) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// Event contains the data returned in the stream from the Submit service.
// This is currently experimental and highly likely to change during gateway development.
type Event struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{3}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// If any of the functions in the Gateway service returns an error, then it will be in the format of
// a google.rpc.Status message. The 'details' field of this message will be populated with extra
// information if the error is a result of one or more failed requests to remote peers or orderer nodes.
// EndpointError contains details of errors that are received by any of the endorsing peers
// as a result of processing the Evaluate or Endorse services, or from the ordering node(s) as a result of
// processing the Submit service.
type EndpointError struct {
	// The address of the endorsing peer or ordering node that returned an error.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The MSP Identifier of this endpoint.
	MspId string `protobuf:"bytes,2,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// The error message returned by this endpoint.
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndpointError) Reset()         { *m = EndpointError{} }
func (m *EndpointError) String() string { return proto.CompactTextString(m) }
func (*EndpointError) ProtoMessage()    {}
func (*EndpointError) Descriptor() ([]byte, []int) {
	return fileDescriptor_285396c8df15061f, []int{4}
}

func (m *EndpointError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndpointError.Unmarshal(m, b)
}
func (m *EndpointError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndpointError.Marshal(b, m, deterministic)
}
func (m *EndpointError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointError.Merge(m, src)
}
func (m *EndpointError) XXX_Size() int {
	return xxx_messageInfo_EndpointError.Size(m)
}
func (m *EndpointError) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointError.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointError proto.InternalMessageInfo

func (m *EndpointError) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EndpointError) GetMspId() string {
	if m != nil {
		return m.MspId
	}
	return ""
}

func (m *EndpointError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Result)(nil), "gateway.Result")
	proto.RegisterType((*ProposedTransaction)(nil), "gateway.ProposedTransaction")
	proto.RegisterType((*PreparedTransaction)(nil), "gateway.PreparedTransaction")
	proto.RegisterType((*Event)(nil), "gateway.Event")
	proto.RegisterType((*EndpointError)(nil), "gateway.EndpointError")
}

func init() { proto.RegisterFile("gateway/gateway.proto", fileDescriptor_285396c8df15061f) }

var fileDescriptor_285396c8df15061f = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x5d, 0x6b, 0xd5, 0x40,
	0x10, 0x25, 0xb6, 0xf7, 0x6b, 0x5a, 0x3f, 0xd8, 0x58, 0xb9, 0x04, 0x2b, 0xe5, 0x82, 0x50, 0xd0,
	0x26, 0x12, 0x5f, 0xf4, 0xb5, 0x10, 0xe4, 0xbe, 0x85, 0xd4, 0xa7, 0xbe, 0xc8, 0x26, 0x3b, 0x26,
	0x81, 0x64, 0x77, 0xd9, 0xdd, 0x5c, 0xdb, 0x07, 0xff, 0x8d, 0x7f, 0xc5, 0xff, 0x25, 0xc9, 0x6e,
	0xd2, 0x5a, 0xbd, 0xfa, 0xb4, 0xcc, 0x9c, 0x33, 0x33, 0xe7, 0xcc, 0x24, 0x70, 0x52, 0x52, 0x83,
	0xdf, 0xe8, 0x6d, 0xe4, 0xde, 0x50, 0x2a, 0x61, 0x04, 0x59, 0xb8, 0x30, 0xf0, 0x25, 0xa2, 0x8a,
	0xa4, 0x12, 0x52, 0x68, 0xda, 0x58, 0x34, 0xf0, 0x0b, 0xd1, 0xb6, 0x82, 0x47, 0xf6, 0xb1, 0xc9,
	0xcd, 0x2b, 0x98, 0x67, 0xa8, 0xbb, 0xc6, 0x90, 0xe7, 0x30, 0xdb, 0xd1, 0xa6, 0xc3, 0xb5, 0x77,
	0xe6, 0x9d, 0x1f, 0x67, 0x36, 0xd8, 0x7c, 0x07, 0x3f, 0x1d, 0xda, 0x20, 0xfb, 0xac, 0x28, 0xd7,
	0xb4, 0x30, 0xb5, 0xe0, 0x24, 0x86, 0xe5, 0xd8, 0x7d, 0xe0, 0x1f, 0xc5, 0x2f, 0x6c, 0x43, 0x1d,
	0x5e, 0xd5, 0x25, 0x47, 0x96, 0x3a, 0x34, 0x9b, 0x78, 0xc4, 0x87, 0x99, 0xb9, 0xf9, 0x52, 0xb3,
	0xf5, 0xa3, 0x33, 0xef, 0x7c, 0x95, 0x1d, 0x9a, 0x9b, 0x2d, 0x23, 0xa7, 0x00, 0x45, 0x45, 0x39,
	0xc7, 0xa6, 0x47, 0x0e, 0x06, 0x64, 0xe5, 0x32, 0x5b, 0xb6, 0xf9, 0xe1, 0xf5, 0xf3, 0x51, 0x52,
	0xf5, 0xfb, 0xfc, 0xb7, 0xb0, 0x44, 0xbe, 0xc3, 0x46, 0x48, 0x74, 0xf3, 0x9f, 0x85, 0xce, 0x57,
	0xe2, 0xf2, 0xd9, 0xc4, 0x20, 0x6f, 0x60, 0xa9, 0x50, 0x4b, 0xc1, 0x35, 0x0e, 0xc3, 0x8f, 0xe2,
	0xa7, 0xe1, 0xb8, 0x39, 0xeb, 0x3e, 0x9b, 0x08, 0x77, 0x32, 0x0f, 0xf6, 0xca, 0x3c, 0x7c, 0x28,
	0xf3, 0x14, 0x66, 0xc9, 0x0e, 0xf9, 0xbe, 0x25, 0x5e, 0xc3, 0xe3, 0x84, 0x33, 0x29, 0x6a, 0x6e,
	0x12, 0xa5, 0x84, 0x22, 0x6b, 0x58, 0x50, 0xc6, 0x14, 0x6a, 0x3d, 0x10, 0x57, 0xd9, 0x18, 0x92,
	0x13, 0x98, 0xb7, 0x5a, 0xde, 0x6d, 0x69, 0xd6, 0x6a, 0xb9, 0x65, 0x7d, 0x41, 0x8b, 0x5a, 0xd3,
	0x12, 0x9d, 0xac, 0x31, 0x8c, 0x7f, 0x7a, 0xb0, 0xf8, 0x64, 0xbd, 0x90, 0x04, 0x16, 0x09, 0x67,
	0x42, 0x69, 0x24, 0x2f, 0x27, 0x83, 0x7f, 0x39, 0x5f, 0x70, 0x1f, 0xfd, 0x73, 0xb9, 0x1f, 0x60,
	0x7e, 0xd5, 0xe5, 0x6d, 0x6d, 0xc8, 0x3f, 0x79, 0xc1, 0x93, 0x09, 0x1d, 0xcc, 0xbf, 0xf3, 0xc8,
	0x47, 0x58, 0x26, 0xbd, 0x65, 0x6a, 0xfe, 0xa7, 0xe0, 0xe1, 0x01, 0x2e, 0x2b, 0x78, 0x2d, 0x54,
	0x19, 0x56, 0xb7, 0x12, 0x55, 0x83, 0xac, 0x44, 0x15, 0x7e, 0xa5, 0xb9, 0xaa, 0x8b, 0xf1, 0xbb,
	0x72, 0xfc, 0xcb, 0x63, 0xe7, 0x36, 0xed, 0xd3, 0xa9, 0x77, 0x1d, 0x95, 0xb5, 0xa9, 0xba, 0xbc,
	0x3f, 0x7f, 0x74, 0xaf, 0x3a, 0xb2, 0xd5, 0x17, 0xb6, 0xfa, 0xa2, 0x14, 0xe3, 0xbf, 0x92, 0xcf,
	0x87, 0xd4, 0xfb, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0xcc, 0xaf, 0x0a, 0x45, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	// The Endorse service passes the ProposedTransaction (which contains the signed proposal)
	// to the gateway in order to obtain sufficient endorsement.
	// The gateway will determine the endorsement plan for the requested chaincode and
	// forward to the appropriate peers for endorsement. It will return to the client a
	// PreparedTransaction message which contains a Envelope message as defined
	// in fabric-protos/common/common.proto.  The client must sign the contents of this
	// envelope before invoking the Submit service
	Endorse(ctx context.Context, in *ProposedTransaction, opts ...grpc.CallOption) (*PreparedTransaction, error)
	// Ths Submit service will process the PreparedTransaction message returned from Endorse service
	// once it has been signed by the client. A stream is opened to return multiple return values.
	// - The Gateway will register transaction event listeners for the given channel/txId.
	// - It will then broadcast the Envelope to the ordering service.
	// - The success/error response is passed back to the client in the stream
	// - The Gateway awaits sufficient transaction commit events before returning and closing the stream,
	//   indicating to the client that transaction has been committed.
	Submit(ctx context.Context, in *PreparedTransaction, opts ...grpc.CallOption) (Gateway_SubmitClient, error)
	// The Evaluate service passes the ProposedTransaction (which contains the signed proposal)
	// to the gateway in order to invoke the transaction function and return the result to the client.
	// No ledger updates are make.  The gateway will select an appropriate peer to query based on
	// block height and load.
	Evaluate(ctx context.Context, in *ProposedTransaction, opts ...grpc.CallOption) (*Result, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Endorse(ctx context.Context, in *ProposedTransaction, opts ...grpc.CallOption) (*PreparedTransaction, error) {
	out := new(PreparedTransaction)
	err := c.cc.Invoke(ctx, "/gateway.Gateway/Endorse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Submit(ctx context.Context, in *PreparedTransaction, opts ...grpc.CallOption) (Gateway_SubmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gateway_serviceDesc.Streams[0], "/gateway.Gateway/Submit", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewaySubmitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_SubmitClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type gatewaySubmitClient struct {
	grpc.ClientStream
}

func (x *gatewaySubmitClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) Evaluate(ctx context.Context, in *ProposedTransaction, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/gateway.Gateway/Evaluate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	// The Endorse service passes the ProposedTransaction (which contains the signed proposal)
	// to the gateway in order to obtain sufficient endorsement.
	// The gateway will determine the endorsement plan for the requested chaincode and
	// forward to the appropriate peers for endorsement. It will return to the client a
	// PreparedTransaction message which contains a Envelope message as defined
	// in fabric-protos/common/common.proto.  The client must sign the contents of this
	// envelope before invoking the Submit service
	Endorse(context.Context, *ProposedTransaction) (*PreparedTransaction, error)
	// Ths Submit service will process the PreparedTransaction message returned from Endorse service
	// once it has been signed by the client. A stream is opened to return multiple return values.
	// - The Gateway will register transaction event listeners for the given channel/txId.
	// - It will then broadcast the Envelope to the ordering service.
	// - The success/error response is passed back to the client in the stream
	// - The Gateway awaits sufficient transaction commit events before returning and closing the stream,
	//   indicating to the client that transaction has been committed.
	Submit(*PreparedTransaction, Gateway_SubmitServer) error
	// The Evaluate service passes the ProposedTransaction (which contains the signed proposal)
	// to the gateway in order to invoke the transaction function and return the result to the client.
	// No ledger updates are make.  The gateway will select an appropriate peer to query based on
	// block height and load.
	Evaluate(context.Context, *ProposedTransaction) (*Result, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) Endorse(ctx context.Context, req *ProposedTransaction) (*PreparedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Endorse not implemented")
}
func (*UnimplementedGatewayServer) Submit(req *PreparedTransaction, srv Gateway_SubmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (*UnimplementedGatewayServer) Evaluate(ctx context.Context, req *ProposedTransaction) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Endorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposedTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Endorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.Gateway/Endorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Endorse(ctx, req.(*ProposedTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Submit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PreparedTransaction)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).Submit(m, &gatewaySubmitServer{stream})
}

type Gateway_SubmitServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type gatewaySubmitServer struct {
	grpc.ServerStream
}

func (x *gatewaySubmitServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposedTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.Gateway/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Evaluate(ctx, req.(*ProposedTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Endorse",
			Handler:    _Gateway_Endorse_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _Gateway_Evaluate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Submit",
			Handler:       _Gateway_Submit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway/gateway.proto",
}
